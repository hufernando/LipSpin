function [ X, exitFlag ] = importBrukerBatch( options, listfolders )
%   Import bruker 1H-NMR samples (FID or spectra) in batch mode
%
%   INPUT
%   options contains the following fields: **(bruker folder structure: ..\user\sample\expno\procno)
%       folder_path: user folder name
%       subfolder_filter: filter for sample folder names containing this string
%       exp_no: expno folder name
%       proc_no: procno folder name
%       minppm: lower ppm limit to import
%       maxppm: upper ppm limit to import
% listfolders: [1xN] cell. Enter this file in case you have the list of sample folders.


%     Copyright (C) 2017 Rubén Barrilero Regadera
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
%
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.

    if isfield(options,  'proc_no') &&  ~isempty(options.proc_no),
        fileType='SPEC';
    else
        fileType='FID';
    end
    exitFlag=0;
    X=[];
    % Check coherence
    if ~exist(options.files_path, 'dir'),
        exitFlag=1;
        errordlg('path does not exist');
        return;   
    end
    if isfield(options, 'minppm') && isfield(options, 'maxppm'),
        if options.minppm > options.maxppm,
            exitFlag=2;
            errordlg('Lower limit can not be higher than upper limit');
            return;
        end
    end

    if nargin==2,
        %if listfolders is entered
        sample_folders=listfolders;
    else
        %if not, launch the importation dialog
        %load content in the target root
        d=dir(options.files_path);
        %filter to only directories
        d = d(find(cellfun(@(x)(x==1),{d(:).isdir})));
        %susbtract '.' and '..' folders
        d = d(find(~cellfun(@(x)(strncmp('.', x, 1)), {d(:).name})));
        %get folder that match the filter
        if ~isempty(options.file_filter)
            semicolons=findstr(options.file_filter, ';');
            semicolons=[0 semicolons length(options.file_filter)+1];
            for i=1:length(semicolons)-1,
                d = d(find(~cellfun(@(x)(isempty((strfind(x, options.file_filter(semicolons(i)+1:semicolons(i+1)-1))))), {d(:).name})));
            end
        end
        %get all the folders in root after filtering
        folder_list = {d.name};
        %launch the dialog
        [index, ok] = listdlg('ListString', folder_list);
        if ok == 0
            %quited or cancelled
            return;
        end
        %get selected folder names
        sample_folders = folder_list(index);
    end

    %Add complete path of spectrum following the structure generated by bruker software
    sample_names = sample_folders;
    i=1;
    while i<=length(sample_names)
        if strcmp(options.files_path(end), '\'),
            options.files_path(end)=[];
        end
        if strcmp(fileType, 'SPEC'),
            %Create path for spectra
            sample_folders{i} = [options.files_path '\' sample_folders{i} '\' num2str(options.exp_no) '\pdata\' num2str(options.proc_no) '\'];
        else
            %Create path for FIDs
            sample_folders{i} = [options.files_path '\' sample_folders{i} '\' num2str(options.exp_no) '\'];
        end
        if ~isdir(sample_folders{i})
            sample_names(i)=[];
            sample_folders(i)=[];
        else
            i=i+1;
        end
    end

    %Check number samples is > 0
    nbSamples=length(sample_folders);
    j=1;
    if nbSamples <1,
        exitFlag=3;
        errordlg('No samples found');
        return;      
    end
    
    %Check all the samples have the same files
    files=zeros(nbSamples,4);
    if strcmp(fileType, 'SPEC'),
        for i=1:nbSamples,
            files(i,1)=exist([sample_folders{i} '1r'], 'file');
            files(i,2)=exist([sample_folders{i} '1i'], 'file');            
            files(i,3)=exist([sample_folders{i} '2rr'], 'file');
            files(i,4)=exist([sample_folders{i} '2ii'], 'file');
        end
    else
        for i=1:nbSamples,
            files(i,1)=exist([sample_folders{i} 'fid'], 'file');
            files(i,2)=exist([sample_folders{i} 'ser'], 'file');
        end
    end
    modeFiles=mode(files,1);
    indRemove=find(~(files(:,1)==modeFiles(1) & files(:,2)==modeFiles(2) & files(:,3)==modeFiles(3) & files(:,4)==modeFiles(4)));
    if ~isempty(indRemove),
        warndlg(['Sample(s) ' num2str(indRemove) ' have different raw files and will be discarded']);
    end
    sample_folders(indRemove)=[];
    sample_names(indRemove)=[];
    nbSamples=length(sample_folders);        
    
    %First exclude samples with different number of points or spectral
    %width
    nbPoints2=zeros(1,nbSamples);
    sw2=zeros(1,nbSamples);
    if strcmp(fileType, 'SPEC'),
        options.type='procs';
        [nbPoints1] = readBrukerParameter(options, 'SI', [], sample_names);
        [sw1] = readBrukerParameter(options, 'SW_p', [], sample_names);
        if exist([sample_folders{1} 'proc2s'], 'file')
            options.type='proc2s';
            [nbPoints2] = readBrukerParameter(options, 'SI', [], sample_names);
            [sw2] = readBrukerParameter(options, 'SW_p', [], sample_names);
        end
    else
        options.type='acqus';
        [nbPoints1] = readBrukerParameter(options, 'TD', [], sample_names);
        [sw1] = readBrukerParameter(options, 'SW_h', [], sample_names);
        if exist([sample_folders{1} 'acqu2s'], 'file')
            options.type='acqu2s';
            [nbPoints2] = readBrukerParameter(options, 'TD', [], sample_names);
            [sw2] = readBrukerParameter(options, 'SW_h', [], sample_names);
        end        
    end
    
    indRemove=find(nbPoints1~=mode(nbPoints1) | nbPoints2~=mode(nbPoints2) | sw1~=mode(sw1) | sw2~=mode(sw2));
    if ~isempty(indRemove),
        warndlg([{'Excluded sample(s):'};{''};sample_names(indRemove)';{''};{'reason: different axisscale'}]);
    end
    sample_folders(indRemove)=[];
    sample_names(indRemove)=[];
    nbSamples=length(sample_folders);
    
    %Get ACQU parameters
    options.type='acqus';
    [X.TD] = readBrukerParameter(options, 'TD', [], sample_names);
    dataDim=X.TD;
    [X.SF] = readBrukerParameter(options, 'SFO1', [], sample_names);
    [X.O1] = readBrukerParameter(options, 'O1', [], sample_names);
    [X.NS] = readBrukerParameter(options, 'NS', [], sample_names);
    [NC_proc] = readBrukerParameter(options, 'NC', [], sample_names);
    [X.RG] = readBrukerParameter(options, 'RG', [], sample_names);
    [X.P1] = readBrukerParameter(options, 'P', 1, sample_names);
    [X.SW1] = readBrukerParameter(options, 'SW_h', [], sample_names);
    [X.GRPDLY] = readBrukerParameter(options, 'GRPDLY', [], sample_names); 
    [BYTORD] = readBrukerParameter(options, 'BYTORDA', [], sample_names);
    if exist([sample_folders{1} 'acqu2s'], 'file')
        options.type='acqu2s';
        [X.TD2] = readBrukerParameter(options, 'TD', [], sample_names);
        [X.SW2] = readBrukerParameter(options, 'SW', [], sample_names);  
        X.SW2=X.SW2.*X.SF;
    end            
%     [NC] = readBrukerParameter(options, 'NC', [], sample_names);
    
    %Get PROC parameters
    memoryDim=zeros(2,1);
    if strcmp(fileType, 'SPEC'),
        options.type='procs';
        [X.SI] = readBrukerParameter(options, 'SI', [], sample_names);
        [NC_proc] = readBrukerParameter(options, 'NC_proc', [], sample_names);
        [BYTORD] = readBrukerParameter(options, 'BYTORDP', [], sample_names);
        [X.SW_p] = readBrukerParameter(options, 'SW_p', [], sample_names);
        [XDIM] = readBrukerParameter(options, 'XDIM', [], sample_names);
        X.OFFSET = readBrukerParameter(options, 'OFFSET', [], sample_names);
        dataDim=X.SI;
        memoryDim=XDIM;
        if exist([sample_folders{1} 'proc2s'], 'file')
            options.type='proc2s';
            [X.SI2] = readBrukerParameter(options, 'SI', [], sample_names);
            [XDIM2] = readBrukerParameter(options, 'XDIM', [], sample_names);
            dataDim=[dataDim; X.SI2];
            memoryDim=[memoryDim; XDIM2];
            [X.SW_p2] = readBrukerParameter(options, 'SW_p', [], sample_names);
        end
    end

    for i=1:nbSamples,
        [data]=readBrukerFile(sample_folders{i}, fileType, BYTORD(i), dataDim(:,1), memoryDim(:,1));
        data = data.*(2^(NC_proc(i)));
        [r c]=size(data);
        if (r>1 && c>1),
            aux=reshape(data, r, 1, c);
            X.data(i,:,:)=permute(aux, [2 1 3]);
        else
            X.data(i,:)=data;
        end        
    end
    X.label{1}=sample_names';
    X.axisscale{3}=[];
    if strcmp(fileType, 'FID')
        acquTime=X.TD(1)/(2*X.SW1(1));
        X.axisscale{2}=linspace(0,acquTime, X.TD(1)/2);
        if ndims(X.data)>2,
            acquTime=X.TD2(1)/(2*X.SW2(1));
            X.axisscale{3}=linspace(0, acquTime, X.TD2(1));
        end
    else
        SW_ppm=X.SW_p(1)/X.SF(1);
        X.axisscale{2}=linspace(X.OFFSET(1),-(SW_ppm-X.OFFSET(1)),X.SI(1));
        if ndims(X.data)>2,
            SW_ppm=X.SW_p2(1)/X.SF(1);
            X.axisscale{3}=linspace((SW_ppm/2), -(SW_ppm/2), X.SI2(1));
        end
    end
end
